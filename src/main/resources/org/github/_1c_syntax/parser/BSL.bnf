{
    parserClass="org.github._1c_syntax.parser.BSLParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="BSL"
    psiImplClassSuffix="Impl"
    psiPackage="org.github._1c_syntax.parser.psi"
    psiImplPackage="org.github._1c_syntax.parser.impl"

    elementTypeHolderClass="org.github._1c_syntax.parser.psi.BSLTypes"
    elementTypeClass="org.github._1c_syntax.parser.psi.BSLElementType"
    tokenTypeClass="org.github._1c_syntax.parser.psi.BSLTokenType"

    tokens=[
        LBRACK               =  '['
        RBRACK               =  ']'
        LPAREN               =  '('
        RPAREN               =  ')'
        COLON                =  ':'
        SEMICOLON            =  ';'
        COMMA                =  ','
        ASSIGN               =  '='
        PLUS                 =  '+'
        MINUS                =  '-'
        LESS                 =  '<'
        NOT_EQUAL            =  '<>'
        LESS_OR_EQUAL        =  '<='
        MUL                  =  '*'
        QUOTIENT             =  '/'
        MODULO               =  '%'
        GREATER              =  '>'
        GREATER_OR_EQUAL     =  '>='
        DOT                  =  '.'
        QUOTE                =  '"'
        QUESTION             =  '?'
    ]
}

bslFile ::= SHEBANG? COMMENT* PREPROCESSOR* USING* moduleVars? subs? codeBlock?

// property ::= (KEY? SEPARATOR VALUE?) | KEY
moduleVars       ::= (VAR_KEYWORD moduleVarsList SEMICOLON?)*
moduleVarsList   ::= moduleVarDeclaration (COMMA moduleVarDeclaration)*
moduleVarDeclaration::= var_name EXPORT_KEYWORD?
subs             ::= sub*
sub              ::= subdeclaration subCodeBlock? endOfSub
subCodeBlock     ::= (subVarDeclaration SEMICOLON?)* codeBlock?
subVarDeclaration::= VAR_KEYWORD subVarsList
subVarsList      ::= var_name (COMMA var_name)*
var_name         ::= identifier
private paramName::= identifier
annotationParam  ::= (paramName (ASSIGN const_value)?) | const_value
annotationParams ::= LPAREN annotationParam (COMMA annotationParam)* RPAREN
annotation       ::= COMPILER_DIRECTIVE annotationParams?
subdeclaration   ::= annotation* SUB_KEYWORD subName LPAREN param_list? RPAREN EXPORT_KEYWORD?
subName          ::= identifier
codeBlock        ::= (command SEMICOLON*)*
private numeric  ::= float | decimal
param_list       ::= param (COMMA param)*
param            ::= BYVAL_KEYWORD? identifier (ASSIGN default_value)?
default_value    ::= const_value
const_value      ::= numeric | string_constant | BOOLEAN_TRUE | BOOLEAN_FALSE | UNDEFINED | NULL | datetime
string_constant  ::= (STRING | (STRINGSTART STRINGPART* STRINGTAIL))+
endOfSub         ::= ENDSUB_KEYWORD
command          ::= (assignment | construction)
assignment       ::= complexIdentifier (ASSIGN expression)?
call_param_list  ::= call_param (COMMA call_param)*
call_param       ::= expression?
expression       ::= member (operation member)*
operation        ::= PLUS | MINUS | MUL | QUOTIENT | MODULO | boolOperation | compareOperation
compareOperation ::= LESS | LESS_OR_EQUAL | GREATER | GREATER_OR_EQUAL | ASSIGN | NOT_EQUAL
boolOperation    ::= OR_KEYWORD | AND_KEYWORD
unaryModifier    ::= NOT_KEYWORD | MINUS
member           ::= unaryModifier? (const_value | complexIdentifier | ( LPAREN expression RPAREN ) | questionOperator)
newExpression    ::= NEW_KEYWORD typeName do_call? | NEW_KEYWORD do_call
private typeName ::= identifier
complexIdentifier::= (identifier | newExpression) modifier*
modifier         ::= access_property | access_index | do_call
access_index     ::= LBRACK expression RBRACK
access_property  ::= DOT identifier
do_call          ::= LPAREN call_param_list? RPAREN
construction     ::= if_expression | while_expression | for_expression
    | try_expression | return_expression | continue_expression | raise_expression
continue_expression::= CONTINUE_KEYWORD
raise_expression ::= RAISE_KEYWORD expression?
if_expression    ::= IF_KEYWORD expression THEN_KEYWORD codeBlock
    (ELSEIF_KEYWORD expression THEN_KEYWORD codeBlock)* (ELSE_KEYWORD codeBlock)? ENDIF_KEYWORD
while_expression ::= WHILE_KEYWORD expression DO_KEYWORD codeBlock ENDDO_KEYWORD
for_expression   ::= countable_for_expression | for_each_expression
countable_for_expression::= FOR_KEYWORD identifier ASSIGN expression TO_KEYWORD expression DO_KEYWORD codeBlock ENDDO_KEYWORD
for_each_expression::= FOR_KEYWORD EACH_KEYWORD identifier FROM_KEYWORD expression DO_KEYWORD codeBlock ENDDO_KEYWORD
try_expression    ::= TRY_KEYWORD codeBlock EXCEPT_KEYWORD codeBlock ENDTRY_KEYWORD
return_expression::= RETURN_KEYWORD expression?
questionOperator ::= QUESTION LPAREN expression COMMA expression COMMA expression RPAREN
